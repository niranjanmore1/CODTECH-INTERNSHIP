import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.chart.PieChart;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;

public class InventoryScreen {
    private final InventorySystem inventorySystem;
    private final ObservableList<Product> productObservableList = FXCollections.observableArrayList();

    public InventoryScreen(InventorySystem inventorySystem) {
        this.inventorySystem = inventorySystem;
        productObservableList.addAll(inventorySystem.getProducts());
    }

    public void start(Stage stage) {
        stage.setTitle("Inventory Management");

        // Product Table
        TableView<Product> tableView = new TableView<>(productObservableList);
        TableColumn<Product, Integer> idColumn = new TableColumn<>("ID");
        idColumn.setCellValueFactory(cellData -> cellData.getValue().idProperty().asObject());

        TableColumn<Product, String> nameColumn = new TableColumn<>("Name");
        nameColumn.setCellValueFactory(cellData -> cellData.getValue().nameProperty());

        TableColumn<Product, Integer> stockColumn = new TableColumn<>("Stock");
        stockColumn.setCellValueFactory(cellData -> cellData.getValue().stockProperty().asObject());

        TableColumn<Product, Double> priceColumn = new TableColumn<>("Price");
        priceColumn.setCellValueFactory(cellData -> cellData.getValue().priceProperty().asObject());

        tableView.getColumns().addAll(idColumn, nameColumn, stockColumn, priceColumn);
        tableView.setPrefHeight(300);

        // Buttons
        Button addButton = new Button("Add Product");
        addButton.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white;");
        addButton.setOnAction(e -> {
            Product newProduct = new ProductDialog().showAndWait();
            if (newProduct != null) {
                inventorySystem.addProduct(newProduct);
                productObservableList.add(newProduct);
            }
        });

        Button deleteButton = new Button("Delete Product");
        deleteButton.setStyle("-fx-background-color: #f44336; -fx-text-fill: white;");
        deleteButton.setOnAction(e -> {
            Product selectedProduct = tableView.getSelectionModel().getSelectedItem();
            if (selectedProduct != null) {
                inventorySystem.removeProduct(selectedProduct.getId());
                productObservableList.remove(selectedProduct);
            }
        });

        Button reportButton = new Button("View Low Stock");
        reportButton.setStyle("-fx-background-color: #2196F3; -fx-text-fill: white;");
        reportButton.setOnAction(e -> showLowStockReport());

        HBox buttonBox = new HBox(10, addButton, deleteButton, reportButton);
        buttonBox.setAlignment(Pos.CENTER);

        VBox root = new VBox(10, tableView, buttonBox);
        root.setPadding(new Insets(20));
        root.setStyle("-fx-background-color: #f0f0f0;");

        Scene scene = new Scene(root, 600, 400);
        stage.setScene(scene);
        stage.show();
    }

    private void showLowStockReport() {
        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();

        for (Product product : inventorySystem.getProducts()) {
            if (product.getStock() < 5) {
                pieChartData.add(new PieChart.Data(product.getName(), product.getStock()));
            }
        }

        PieChart pieChart = new PieChart(pieChartData);
        pieChart.setTitle("Low Stock Products");

        Stage reportStage = new Stage();
        reportStage.setTitle("Low Stock Report");
        reportStage.setScene(new Scene(new VBox(pieChart), 400, 300));
        reportStage.show();
    }
}
